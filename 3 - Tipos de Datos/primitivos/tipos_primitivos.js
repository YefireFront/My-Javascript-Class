// ------------------------------------------
// üìò ARCHIVO: tipos_primitivos.js
// Gu√≠a completa sobre los 6 tipos de datos primitivos en JavaScript
// ------------------------------------------

// ¬øQu√© es un tipo de dato primitivo?
// Es un valor que no es un objeto y no tiene m√©todos. Se almacenan directamente en la memoria.
// Existen 6 tipos primitivos:

// ==========================================
// 1. STRING - Texto
// ==========================================

let texto1 = "Hola mundo";
let texto2 = 'JavaScript';
let texto3 = `Plantilla con backticks`;

console.log(typeof texto1); // string

// ‚úÖ Puedes usar comillas dobles, simples o backticks
// ‚úÖ Los backticks permiten interpolaci√≥n:
let nombre = "Ana";
let saludo = `Hola, ${nombre}!`; // Hola, Ana!

// ==========================================
// 2. NUMBER - N√∫meros (enteros y decimales)
// ==========================================

let entero = 100;
let decimal = 3.14;
let negativo = -50;

console.log(typeof decimal); // number

// ‚úÖ Soporta operaciones matem√°ticas
let resultado = entero + decimal - negativo; // 100 + 3.14 + 50 = 153.14

// Cuidado con divisiones por cero:
let divisionPorCero = 10 / 0; // Infinity

// ==========================================
// 3. BOOLEAN - Verdadero o falso
// ==========================================

let esMayor = true;
let esMenor = false;

console.log(typeof esMayor); // boolean

// ‚úÖ Se usan en condicionales
if (esMayor) {
  console.log("La condici√≥n es verdadera");
}

// ==========================================
// 4. UNDEFINED - Valor no asignado
// ==========================================

let sinValor;
console.log(sinValor);       // undefined
console.log(typeof sinValor); // undefined

// ‚úÖ Se produce cuando una variable es declarada pero no inicializada

// ==========================================
// 5. NULL - Ausencia intencional de valor
// ==========================================

let usuario = null;
console.log(usuario);        // null
console.log(typeof usuario); // ‚ö†Ô∏è object (esto es un bug hist√≥rico de JS)

// ‚úÖ Se usa para decir "intencionalmente vac√≠o"

// ==========================================
// 6. SYMBOL - Identificadores √∫nicos
// ==========================================

let simbolo1 = Symbol("id");
let simbolo2 = Symbol("id");

console.log(simbolo1 === simbolo2); // false (cada s√≠mbolo es √∫nico)
console.log(typeof simbolo1);       // symbol

// ‚úÖ Se usa para crear propiedades √∫nicas en objetos

// ==========================================
// BONUS: BIGINT (nuevo tipo no primitivo antiguo)
// ==========================================

let numeroGrande = 1234567890123456789012345678901234567890n;
console.log(typeof numeroGrande); // bigint

// ==========================================
// Comparaci√≥n entre undefined y null
// ==========================================

console.log(undefined == null);  // true (igualdad d√©bil)
console.log(undefined === null); // false (igualdad estricta)

// ==========================================
// Ejemplo pr√°ctico de cada tipo primitivo
// ==========================================

const usuarioEjemplo = {
  nombre: "Carlos",         // string
  edad: 25,                 // number
  estaActivo: true,         // boolean
  direccion: undefined,     // undefined
  telefono: null,           // null
  id: Symbol("usuarioID")   // symbol
};

console.log(usuarioEjemplo);
